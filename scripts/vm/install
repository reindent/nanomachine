#!/bin/bash
# Script to install Docker container for nanomachine

# Run precheck, if fails stop
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
$SCRIPT_DIR/precheck || exit 1

BRIDGE_DIR=$SCRIPT_DIR/../../bridge

CONTAINER_HOME="/home/nova"
CONTAINER_NAME="nanomachine-vm"
CONTAINER_VNC_PASSWORD="password"
HOST_VNC_PORT="5900"
HOST_BRIDGE_PORT="8787"

# Check if container exists, if it does exist exit
if [ -n "$(docker ps -a -q -f name=$CONTAINER_NAME)" ]; then
  echo "VM already installed"
  exit 1
fi

# Start the container
docker run -d -p $HOST_VNC_PORT:5900 -p $HOST_BRIDGE_PORT:8787 --name $CONTAINER_NAME -e VNC_PASSWORD="$CONTAINER_VNC_PASSWORD" mrcolorrain/vnc-browser:debian

# Wait for container to initialize
$SCRIPT_DIR/wait || exit 1

#################################
# ===== BRIDGE INSTALLATION =====
#################################

# Install node and nvm in the container
docker exec $CONTAINER_NAME bash -c "apt-get update && apt-get install -y curl"
docker exec $CONTAINER_NAME bash -l -c "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.2/install.sh | bash"
docker exec $CONTAINER_NAME bash -l -c "nvm install 22"

# Install nanomachine bridge for nanobrowser (TODO: find a better way later)
rm -rf $BRIDGE_DIR/node_modules
docker exec $CONTAINER_NAME bash -l -c "mkdir -p $CONTAINER_HOME/bridge"
docker cp $BRIDGE_DIR/. $CONTAINER_NAME:$CONTAINER_HOME/bridge
docker exec $CONTAINER_NAME bash -l -c "npm i -g tsx"
docker exec $CONTAINER_NAME bash -l -c "cd $CONTAINER_HOME/bridge && npm install"

# ===== END OF BRIDGE INSTALLATION =====

######################################
# ===== NANOBROWSER INSTALLATION =====
######################################

# Install necessary tools for nanobrowser
echo "Installing necessary tools for nanobrowser..."
docker exec $CONTAINER_NAME bash -c "apt-get update && apt-get install -y wget unzip"

# Download nanobrowser extension
echo "Downloading nanobrowser extension..."
docker exec $CONTAINER_NAME bash -c "cd /tmp && wget https://github.com/nanobrowser/nanobrowser/releases/download/v0.1.4/nanobrowser.zip"

# Extract the extension
echo "Extracting extension..."
docker exec $CONTAINER_NAME bash -c "cd /tmp && unzip nanobrowser.zip -d nanobrowser"

# Set up extension directory
echo "Setting up extension directory..."
docker exec $CONTAINER_NAME bash -c "mkdir -p $CONTAINER_HOME/extensions && cp -r /tmp/nanobrowser $CONTAINER_HOME/extensions/ && chown -R nova:nova $CONTAINER_HOME/extensions"

# Create a script to launch Chromium with the extension
echo "Creating launch script..."
# Create the script content locally first
cat > temp-launch-script.sh << EOF
#!/bin/bash
pkill -f chromium || true

# Launch Chromium with the nanobrowser extension
/usr/bin/chromium \\
  --no-sandbox \\
  --disable-setuid-sandbox \\
  --disable-extensions-except=$CONTAINER_HOME/extensions/nanobrowser \\
  --load-extension=$CONTAINER_HOME/extensions/nanobrowser \\
  --enable-features=ExtensionsToolbarMenu \\
  "chrome://extensions/" &
EOF

# Copy the script to the container
docker cp temp-launch-script.sh $CONTAINER_NAME:$CONTAINER_HOME/launch-chrome.sh
rm temp-launch-script.sh

# Make the script executable
docker exec $CONTAINER_NAME bash -c "chmod +x $CONTAINER_HOME/launch-chrome.sh && chown nova:nova $CONTAINER_HOME/launch-chrome.sh"

# ===== END OF NANOBROWSER INSTALLATION =====

# Run nanobrowser bridge as a background service
docker exec $CONTAINER_NAME bash -l -c "cd $CONTAINER_HOME/bridge && nohup tsx index.ts & > /home/nova/nanomachine.log 2>&1"

# Run Chromium with nanobrowser extension
docker exec $CONTAINER_NAME bash -l -c "$CONTAINER_HOME/launch-chrome.sh > /home/nova/nanobrowser.log 2>&1 &"

echo "VM installed successfully"
exit 0
